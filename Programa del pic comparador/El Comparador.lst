CCS PCM C Compiler, Version 5.076, 56587               04-Jul-21 13:35

               Filename:   C:\Users\joan\Documents\CCS C Projects\prueba trabajo\El Comparador.lst

               ROM used:   699 words (9%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           28 (8%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   200
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  32
000A:  RETLW  33
000B:  RETLW  34
000C:  RETLW  35
000D:  RETLW  36
000E:  RETLW  37
000F:  RETLW  38
0010:  RETLW  39
0011:  RETLW  2A
0012:  RETLW  30
0013:  RETLW  23
0014:  DATA C1,33
0015:  DATA F2,32
0016:  DATA E7,30
0017:  DATA 72,10
0018:  DATA 41,00
0019:  DATA C1,33
001A:  DATA F2,32
001B:  DATA E7,30
001C:  DATA 72,10
001D:  DATA 42,00
001E:  DATA D3,37
001F:  DATA 6E,10
0020:  DATA E9,33
0021:  DATA F5,30
0022:  DATA EC,32
0023:  DATA 73,00
0024:  DATA 41,10
0025:  DATA E5,39
0026:  DATA A0,36
0027:  DATA E1,3C
0028:  DATA 6F,39
0029:  DATA 00,01
002A:  DATA 62,10
002B:  DATA E5,39
002C:  DATA A0,36
002D:  DATA E1,3C
002E:  DATA 6F,39
002F:  DATA 00,01
0030:  DATA C6,34
0031:  DATA 6E,10
0032:  DATA E4,32
0033:  DATA 6C,10
0034:  DATA 70,39
0035:  DATA EF,31
0036:  DATA E5,39
0037:  DATA 6F,00
*
0122:  MOVF   0B,W
0123:  MOVWF  2A
0124:  BCF    0B.7
0125:  BSF    03.5
0126:  BSF    03.6
0127:  BSF    0C.7
0128:  BSF    0C.0
0129:  NOP
012A:  NOP
012B:  BCF    03.5
012C:  BCF    03.6
012D:  BTFSC  2A.7
012E:  BSF    0B.7
012F:  BSF    03.6
0130:  MOVF   0C,W
0131:  ANDLW  7F
0132:  BTFSC  03.2
0133:  GOTO   176
0134:  BCF    03.6
0135:  MOVWF  2A
0136:  BSF    03.6
0137:  MOVF   0D,W
0138:  BCF    03.6
0139:  MOVWF  2B
013A:  BSF    03.6
013B:  MOVF   0F,W
013C:  BCF    03.6
013D:  MOVWF  2C
013E:  MOVF   2A,W
013F:  MOVWF  2D
0140:  CALL   0F6
0141:  MOVF   2B,W
0142:  BSF    03.6
0143:  MOVWF  0D
0144:  BCF    03.6
0145:  MOVF   2C,W
0146:  BSF    03.6
0147:  MOVWF  0F
0148:  BCF    03.6
0149:  MOVF   0B,W
014A:  MOVWF  2D
014B:  BCF    0B.7
014C:  BSF    03.5
014D:  BSF    03.6
014E:  BSF    0C.7
014F:  BSF    0C.0
0150:  NOP
0151:  NOP
0152:  BCF    03.5
0153:  BCF    03.6
0154:  BTFSC  2D.7
0155:  BSF    0B.7
0156:  BSF    03.6
0157:  RLF    0C,W
0158:  RLF    0E,W
0159:  ANDLW  7F
015A:  BTFSC  03.2
015B:  GOTO   176
015C:  BCF    03.6
015D:  MOVWF  2A
015E:  BSF    03.6
015F:  MOVF   0D,W
0160:  BCF    03.6
0161:  MOVWF  2B
0162:  BSF    03.6
0163:  MOVF   0F,W
0164:  BCF    03.6
0165:  MOVWF  2C
0166:  MOVF   2A,W
0167:  MOVWF  2D
0168:  CALL   0F6
0169:  MOVF   2B,W
016A:  BSF    03.6
016B:  MOVWF  0D
016C:  BCF    03.6
016D:  MOVF   2C,W
016E:  BSF    03.6
016F:  MOVWF  0F
0170:  INCF   0D,F
0171:  BTFSC  03.2
0172:  INCF   0F,F
0173:  BCF    03.6
0174:  GOTO   122
0175:  BSF    03.6
0176:  BCF    03.6
0177:  RETURN
*
01C8:  CLRF   77
01C9:  CLRF   78
01CA:  MOVF   2C,W
01CB:  BCF    03.0
01CC:  BTFSC  2D.0
01CD:  ADDWF  77,F
01CE:  RRF    77,F
01CF:  RRF    78,F
01D0:  BTFSC  2D.1
01D1:  ADDWF  77,F
01D2:  RRF    77,F
01D3:  RRF    78,F
01D4:  BTFSC  2D.2
01D5:  ADDWF  77,F
01D6:  RRF    77,F
01D7:  RRF    78,F
01D8:  BTFSC  2D.3
01D9:  ADDWF  77,F
01DA:  RRF    77,F
01DB:  RRF    78,F
01DC:  BTFSC  2D.4
01DD:  ADDWF  77,F
01DE:  RRF    77,F
01DF:  RRF    78,F
01E0:  BTFSC  2D.5
01E1:  ADDWF  77,F
01E2:  RRF    77,F
01E3:  RRF    78,F
01E4:  BTFSC  2D.6
01E5:  ADDWF  77,F
01E6:  RRF    77,F
01E7:  RRF    78,F
01E8:  BTFSC  2D.7
01E9:  ADDWF  77,F
01EA:  RRF    77,F
01EB:  RRF    78,F
....................  
.................... #list 
....................  
.................... #fuses hs,nowdt 
.................... #use delay(clock=20M) 
*
0038:  MOVLW  2F
0039:  MOVWF  04
003A:  BCF    03.7
003B:  MOVF   00,W
003C:  BTFSC  03.2
003D:  GOTO   04B
003E:  MOVLW  06
003F:  MOVWF  78
0040:  CLRF   77
0041:  DECFSZ 77,F
0042:  GOTO   041
0043:  DECFSZ 78,F
0044:  GOTO   040
0045:  MOVLW  7B
0046:  MOVWF  77
0047:  DECFSZ 77,F
0048:  GOTO   047
0049:  DECFSZ 00,F
004A:  GOTO   03E
004B:  RETURN
....................  
....................  
.................... #define use_portb_kbd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0067:  MOVLW  0F
0068:  BSF    03.5
0069:  ANDWF  08,W
006A:  IORLW  F0
006B:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
006C:  BCF    03.5
006D:  BSF    08.2
....................    delay_cycles(1); 
006E:  NOP
....................    lcd_output_enable(1); 
006F:  BSF    08.0
....................    delay_cycles(1); 
0070:  NOP
....................    high = lcd_read_nibble(); 
0071:  CALL   05B
0072:  MOVF   78,W
0073:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
0074:  BCF    08.0
....................    delay_cycles(1); 
0075:  NOP
....................    lcd_output_enable(1); 
0076:  BSF    08.0
....................    delay_us(1); 
0077:  GOTO   078
0078:  GOTO   079
0079:  NOP
....................    low = lcd_read_nibble(); 
007A:  CALL   05B
007B:  MOVF   78,W
007C:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
007D:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007E:  MOVLW  0F
007F:  BSF    03.5
0080:  ANDWF  08,W
0081:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0082:  BCF    03.5
0083:  SWAPF  35,W
0084:  MOVWF  77
0085:  MOVLW  F0
0086:  ANDWF  77,F
0087:  MOVF   77,W
0088:  IORWF  34,W
0089:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
005B:  MOVF   08,W
005C:  MOVWF  77
005D:  SWAPF  08,W
005E:  ANDLW  0F
005F:  MOVWF  78
....................   #endif 
0060:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
004C:  SWAPF  35,W
004D:  ANDLW  F0
004E:  MOVWF  77
004F:  MOVLW  0F
0050:  ANDWF  08,W
0051:  IORWF  77,W
0052:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0053:  NOP
....................    lcd_output_enable(1); 
0054:  BSF    08.0
....................    delay_us(2); 
0055:  MOVLW  03
0056:  MOVWF  77
0057:  DECFSZ 77,F
0058:  GOTO   057
....................    lcd_output_enable(0); 
0059:  BCF    08.0
005A:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0061:  BSF    03.5
0062:  BCF    08.0
....................    lcd_rs_tris(); 
0063:  BCF    08.1
....................    lcd_rw_tris(); 
0064:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0065:  BCF    03.5
0066:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
008A:  MOVF   78,W
008B:  MOVWF  34
008C:  BTFSC  34.7
008D:  GOTO   067
....................    lcd_output_rs(address); 
008E:  BTFSS  32.0
008F:  BCF    08.1
0090:  BTFSC  32.0
0091:  BSF    08.1
....................    delay_cycles(1); 
0092:  NOP
....................    lcd_output_rw(0); 
0093:  BCF    08.2
....................    delay_cycles(1); 
0094:  NOP
....................    lcd_output_enable(0); 
0095:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0096:  SWAPF  33,W
0097:  MOVWF  34
0098:  MOVLW  0F
0099:  ANDWF  34,F
009A:  MOVF   34,W
009B:  MOVWF  35
009C:  CALL   04C
....................    lcd_send_nibble(n & 0xf); 
009D:  MOVF   33,W
009E:  ANDLW  0F
009F:  MOVWF  34
00A0:  MOVWF  35
00A1:  CALL   04C
00A2:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00A3:  MOVLW  28
00A4:  MOVWF  2B
00A5:  MOVLW  0C
00A6:  MOVWF  2C
00A7:  MOVLW  01
00A8:  MOVWF  2D
00A9:  MOVLW  06
00AA:  MOVWF  2E
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00AB:  BCF    08.0
....................    lcd_output_rs(0); 
00AC:  BCF    08.1
....................    lcd_output_rw(0); 
00AD:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00AE:  MOVLW  0F
00AF:  BSF    03.5
00B0:  ANDWF  08,W
00B1:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00B2:  BCF    08.0
....................    lcd_rs_tris(); 
00B3:  BCF    08.1
....................    lcd_rw_tris(); 
00B4:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00B5:  MOVLW  0F
00B6:  BCF    03.5
00B7:  MOVWF  2F
00B8:  CALL   038
....................    for(i=1;i<=3;++i) 
00B9:  MOVLW  01
00BA:  MOVWF  2A
00BB:  MOVF   2A,W
00BC:  SUBLW  03
00BD:  BTFSS  03.0
00BE:  GOTO   0C7
....................    { 
....................        lcd_send_nibble(3); 
00BF:  MOVLW  03
00C0:  MOVWF  35
00C1:  CALL   04C
....................        delay_ms(5); 
00C2:  MOVLW  05
00C3:  MOVWF  2F
00C4:  CALL   038
00C5:  INCF   2A,F
00C6:  GOTO   0BB
....................    } 
....................     
....................    lcd_send_nibble(2); 
00C7:  MOVLW  02
00C8:  MOVWF  35
00C9:  CALL   04C
....................    delay_ms(5); 
00CA:  MOVLW  05
00CB:  MOVWF  2F
00CC:  CALL   038
....................    for(i=0;i<=3;++i) 
00CD:  CLRF   2A
00CE:  MOVF   2A,W
00CF:  SUBLW  03
00D0:  BTFSS  03.0
00D1:  GOTO   0DE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00D2:  MOVLW  2B
00D3:  ADDWF  2A,W
00D4:  MOVWF  04
00D5:  BCF    03.7
00D6:  MOVF   00,W
00D7:  MOVWF  2F
00D8:  CLRF   32
00D9:  MOVF   2F,W
00DA:  MOVWF  33
00DB:  CALL   061
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00DC:  INCF   2A,F
00DD:  GOTO   0CE
00DE:  BCF    0A.3
00DF:  BCF    0A.4
00E0:  GOTO   219 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
00E4:  DECFSZ 2F,W
00E5:  GOTO   0E7
00E6:  GOTO   0EA
....................       address=LCD_LINE_TWO; 
00E7:  MOVLW  40
00E8:  MOVWF  30
00E9:  GOTO   0EB
....................    else 
....................       address=0; 
00EA:  CLRF   30
....................       
....................    address+=x-1; 
00EB:  MOVLW  01
00EC:  SUBWF  2E,W
00ED:  ADDWF  30,F
....................    lcd_send_byte(0,0x80|address); 
00EE:  MOVF   30,W
00EF:  IORLW  80
00F0:  MOVWF  31
00F1:  CLRF   32
00F2:  MOVF   31,W
00F3:  MOVWF  33
00F4:  CALL   061
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00F5:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00F6:  MOVF   2D,W
00F7:  XORLW  07
00F8:  BTFSC  03.2
00F9:  GOTO   104
00FA:  XORLW  0B
00FB:  BTFSC  03.2
00FC:  GOTO   109
00FD:  XORLW  06
00FE:  BTFSC  03.2
00FF:  GOTO   111
0100:  XORLW  02
0101:  BTFSC  03.2
0102:  GOTO   117
0103:  GOTO   11C
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0104:  MOVLW  01
0105:  MOVWF  2E
0106:  MOVWF  2F
0107:  CALL   0E4
0108:  GOTO   121
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0109:  CLRF   32
010A:  MOVLW  01
010B:  MOVWF  33
010C:  CALL   061
....................                      delay_ms(2); 
010D:  MOVLW  02
010E:  MOVWF  2F
010F:  CALL   038
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0110:  GOTO   121
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0111:  MOVLW  01
0112:  MOVWF  2E
0113:  MOVLW  02
0114:  MOVWF  2F
0115:  CALL   0E4
0116:  GOTO   121
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0117:  CLRF   32
0118:  MOVLW  10
0119:  MOVWF  33
011A:  CALL   061
011B:  GOTO   121
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
011C:  MOVLW  01
011D:  MOVWF  32
011E:  MOVF   2D,W
011F:  MOVWF  33
0120:  CALL   061
....................      #endif 
....................    } 
0121:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <kbd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD.C                                 //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc()  Will return a key value if pressed or /0 if not  //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
.................... #if defined use_portb_kbd 
....................    #byte kbd = getenv("SFR:PORTB") 
.................... #else 
....................    #byte kbd = getenv("SFR:PORTD") 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 5) 
.................... #define COL1 (1 << 6) 
.................... #define COL2 (1 << 7) 
....................  
.................... #define ROW0 (1 << 1) 
.................... #define ROW1 (1 << 2) 
.................... #define ROW2 (1 << 3) 
.................... #define ROW3 (1 << 4) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][3] = {{'1','2','3'}, 
....................                          {'4','5','6'}, 
....................                          {'7','8','9'}, 
....................                          {'*','0','#'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
*
00E1:  BCF    0A.3
00E2:  BCF    0A.4
00E3:  GOTO   21A (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
020F:  BCF    03.5
0210:  CLRF   20
....................    static int1 kbd_down; 
0211:  BCF    21.0
....................    static char last_key; 
0212:  CLRF   22
....................    static BYTE col; 
0213:  CLRF   23
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
*
0178:  CLRF   2A
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
0179:  INCF   20,F
017A:  MOVF   20,W
017B:  SUBLW  21
017C:  BTFSC  03.0
017D:  GOTO   1F9
....................        switch (col) { 
017E:  MOVF   23,W
017F:  BTFSC  03.2
0180:  GOTO   188
0181:  XORLW  01
0182:  BTFSC  03.2
0183:  GOTO   18E
0184:  XORLW  03
0185:  BTFSC  03.2
0186:  GOTO   194
0187:  GOTO   199
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
0188:  MOVLW  DE
0189:  BSF    03.5
018A:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
018B:  BCF    03.5
018C:  MOVWF  06
....................                     break; 
018D:  GOTO   199
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
018E:  MOVLW  BE
018F:  BSF    03.5
0190:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
0191:  BCF    03.5
0192:  MOVWF  06
....................                     break; 
0193:  GOTO   199
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
0194:  MOVLW  7E
0195:  BSF    03.5
0196:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
0197:  BCF    03.5
0198:  MOVWF  06
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
0199:  BTFSS  21.0
019A:  GOTO   1A5
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
019B:  MOVF   06,W
019C:  ANDLW  1E
019D:  SUBLW  1E
019E:  BTFSS  03.2
019F:  GOTO   1A4
....................            kbd_down=FALSE; 
01A0:  BCF    21.0
....................            kchar=last_key; 
01A1:  MOVF   22,W
01A2:  MOVWF  2A
....................            last_key='\0'; 
01A3:  CLRF   22
....................          } 
....................        } else { 
01A4:  GOTO   1F8
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
01A5:  MOVF   06,W
01A6:  ANDLW  1E
01A7:  SUBLW  1E
01A8:  BTFSC  03.2
01A9:  GOTO   1F3
....................              if((kbd & ROW0)==0) 
01AA:  MOVF   06,W
01AB:  ANDLW  02
01AC:  BTFSS  03.2
01AD:  GOTO   1B0
....................                row=0; 
01AE:  CLRF   2B
01AF:  GOTO   1C4
....................              else if((kbd & ROW1)==0) 
01B0:  MOVF   06,W
01B1:  ANDLW  04
01B2:  BTFSS  03.2
01B3:  GOTO   1B7
....................                row=1; 
01B4:  MOVLW  01
01B5:  MOVWF  2B
01B6:  GOTO   1C4
....................              else if((kbd & ROW2)==0) 
01B7:  MOVF   06,W
01B8:  ANDLW  08
01B9:  BTFSS  03.2
01BA:  GOTO   1BE
....................                row=2; 
01BB:  MOVLW  02
01BC:  MOVWF  2B
01BD:  GOTO   1C4
....................              else if((kbd & ROW3)==0) 
01BE:  MOVF   06,W
01BF:  ANDLW  10
01C0:  BTFSS  03.2
01C1:  GOTO   1C4
....................                row=3; 
01C2:  MOVLW  03
01C3:  MOVWF  2B
....................              last_key =KEYS[row][col]; 
01C4:  MOVF   2B,W
01C5:  MOVWF  2C
01C6:  MOVLW  03
01C7:  MOVWF  2D
*
01EC:  MOVF   23,W
01ED:  ADDWF  78,W
01EE:  CALL   004
01EF:  MOVWF  78
01F0:  MOVWF  22
....................              kbd_down = TRUE; 
01F1:  BSF    21.0
....................           } else { 
01F2:  GOTO   1F8
....................              ++col; 
01F3:  INCF   23,F
....................              if(col==3) 
01F4:  MOVF   23,W
01F5:  SUBLW  03
01F6:  BTFSC  03.2
....................                col=0; 
01F7:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
01F8:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
01F9:  MOVLW  FE
01FA:  BSF    03.5
01FB:  MOVWF  06
....................   return(kchar); 
01FC:  BCF    03.5
01FD:  MOVF   2A,W
01FE:  MOVWF  78
01FF:  RETURN
.................... } 
....................  
.................... void main() 
0200:  MOVF   03,W
0201:  ANDLW  1F
0202:  MOVWF  03
0203:  CLRF   25
0204:  CLRF   24
0205:  MOVLW  FF
0206:  MOVWF  26
0207:  BSF    03.5
0208:  BSF    1F.0
0209:  BSF    1F.1
020A:  BSF    1F.2
020B:  BCF    1F.3
020C:  MOVLW  07
020D:  MOVWF  1C
020E:  BCF    03.7
*
0214:  CLRF   29
.................... { 
....................     
....................    char a; 
....................    char b; 
....................  
....................     
....................  
....................    int i=0; 
....................  
....................    port_b_pullups (true); 
0215:  BSF    03.5
0216:  BCF    01.7
....................    lcd_init (); 
0217:  BCF    03.5
0218:  GOTO   0A3
....................    kbd_init (); 
0219:  GOTO   0E1
....................     
....................  
....................     
....................     
....................  
....................    while(i<2) 
021A:  MOVF   29,W
021B:  SUBLW  01
021C:  BTFSS  03.0
021D:  GOTO   2AE
....................    { 
....................       a=0; 
021E:  CLRF   27
....................       b=0; 
021F:  CLRF   28
....................       lcd_gotoxy(1,1); 
0220:  MOVLW  01
0221:  MOVWF  2E
0222:  MOVWF  2F
0223:  CALL   0E4
....................       printf(LCD_PUTC, "Agregar A"); 
0224:  MOVLW  14
0225:  BSF    03.6
0226:  MOVWF  0D
0227:  MOVLW  00
0228:  MOVWF  0F
0229:  BCF    03.6
022A:  CALL   122
....................        
....................       while (a==0) 
022B:  MOVF   27,F
022C:  BTFSS  03.2
022D:  GOTO   24D
....................       { 
....................          lcd_gotoxy(1,2); 
022E:  MOVLW  01
022F:  MOVWF  2E
0230:  MOVLW  02
0231:  MOVWF  2F
0232:  CALL   0E4
....................          a=kbd_getc(); 
0233:  CALL   178
0234:  MOVF   78,W
0235:  MOVWF  27
....................          if (a!=0) 
0236:  MOVF   27,F
0237:  BTFSC  03.2
0238:  GOTO   24C
....................          { 
....................             printf(lcd_putc, "a: %c", a); 
0239:  MOVLW  61
023A:  MOVWF  2D
023B:  CALL   0F6
023C:  MOVLW  3A
023D:  MOVWF  2D
023E:  CALL   0F6
023F:  MOVLW  20
0240:  MOVWF  2D
0241:  CALL   0F6
0242:  MOVF   27,W
0243:  MOVWF  2D
0244:  CALL   0F6
....................           
....................             delay_ms(200); 
0245:  MOVLW  C8
0246:  MOVWF  2F
0247:  CALL   038
....................             i++; 
0248:  INCF   29,F
....................           
....................             printf(LCD_PUTC, "\f"); 
0249:  MOVLW  0C
024A:  MOVWF  2D
024B:  CALL   0F6
....................        
....................          } 
024C:  GOTO   22B
....................           
....................       } 
....................       lcd_gotoxy(1,1); 
024D:  MOVLW  01
024E:  MOVWF  2E
024F:  MOVWF  2F
0250:  CALL   0E4
....................       printf(LCD_PUTC, "Agregar B"); 
0251:  MOVLW  19
0252:  BSF    03.6
0253:  MOVWF  0D
0254:  MOVLW  00
0255:  MOVWF  0F
0256:  BCF    03.6
0257:  CALL   122
....................       
....................       while (b==0) 
0258:  MOVF   28,F
0259:  BTFSS  03.2
025A:  GOTO   27A
....................       { 
....................          lcd_gotoxy(1,2); 
025B:  MOVLW  01
025C:  MOVWF  2E
025D:  MOVLW  02
025E:  MOVWF  2F
025F:  CALL   0E4
....................          b=kbd_getc(); 
0260:  CALL   178
0261:  MOVF   78,W
0262:  MOVWF  28
....................          if (b!=0) 
0263:  MOVF   28,F
0264:  BTFSC  03.2
0265:  GOTO   279
....................          { 
....................             printf(lcd_putc, "b: %c", b); 
0266:  MOVLW  62
0267:  MOVWF  2D
0268:  CALL   0F6
0269:  MOVLW  3A
026A:  MOVWF  2D
026B:  CALL   0F6
026C:  MOVLW  20
026D:  MOVWF  2D
026E:  CALL   0F6
026F:  MOVF   28,W
0270:  MOVWF  2D
0271:  CALL   0F6
....................           
....................             delay_ms(200); 
0272:  MOVLW  C8
0273:  MOVWF  2F
0274:  CALL   038
....................             i++; 
0275:  INCF   29,F
....................           
....................             printf(LCD_PUTC, "\f"); 
0276:  MOVLW  0C
0277:  MOVWF  2D
0278:  CALL   0F6
....................        
....................          } 
0279:  GOTO   258
....................       } 
....................       if (a==b) { 
027A:  MOVF   28,W
027B:  SUBWF  27,W
027C:  BTFSS  03.2
027D:  GOTO   28B
....................          OUTPUT_HIGH(pin_c0); 
027E:  BCF    26.0
027F:  MOVF   26,W
0280:  BSF    03.5
0281:  MOVWF  07
0282:  BCF    03.5
0283:  BSF    07.0
....................          printf(lcd_putc, "Son iguales"); 
0284:  MOVLW  1E
0285:  BSF    03.6
0286:  MOVWF  0D
0287:  MOVLW  00
0288:  MOVWF  0F
0289:  BCF    03.6
028A:  CALL   122
....................        } 
....................        if (a>b) { 
028B:  MOVF   27,W
028C:  SUBWF  28,W
028D:  BTFSC  03.0
028E:  GOTO   29C
....................          OUTPUT_HIGH(pin_c1); 
028F:  BCF    26.1
0290:  MOVF   26,W
0291:  BSF    03.5
0292:  MOVWF  07
0293:  BCF    03.5
0294:  BSF    07.1
....................          printf(lcd_putc, "A es mayor"); 
0295:  MOVLW  24
0296:  BSF    03.6
0297:  MOVWF  0D
0298:  MOVLW  00
0299:  MOVWF  0F
029A:  BCF    03.6
029B:  CALL   122
....................        } 
....................        if (a<b) { 
029C:  MOVF   28,W
029D:  SUBWF  27,W
029E:  BTFSC  03.0
029F:  GOTO   2AD
....................          OUTPUT_HIGH(pin_c2); 
02A0:  BCF    26.2
02A1:  MOVF   26,W
02A2:  BSF    03.5
02A3:  MOVWF  07
02A4:  BCF    03.5
02A5:  BSF    07.2
....................          printf(lcd_putc, "b es mayor"); 
02A6:  MOVLW  2A
02A7:  BSF    03.6
02A8:  MOVWF  0D
02A9:  MOVLW  00
02AA:  MOVWF  0F
02AB:  BCF    03.6
02AC:  CALL   122
....................        } 
02AD:  GOTO   21A
....................        
....................    } 
....................    lcd_gotoxy(1,2); 
02AE:  MOVLW  01
02AF:  MOVWF  2E
02B0:  MOVLW  02
02B1:  MOVWF  2F
02B2:  CALL   0E4
....................    printf(LCD_PUTC, "Fin del proceso"); 
02B3:  MOVLW  30
02B4:  BSF    03.6
02B5:  MOVWF  0D
02B6:  MOVLW  00
02B7:  MOVWF  0F
02B8:  BCF    03.6
02B9:  CALL   122
....................     
.................... } 
....................  
02BA:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
